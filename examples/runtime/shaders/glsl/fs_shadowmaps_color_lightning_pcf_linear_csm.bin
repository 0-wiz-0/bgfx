FSHFÅ≠úuniform sampler2D u_shadowMap3;
uniform sampler2D u_shadowMap2;
uniform sampler2D u_shadowMap1;
uniform sampler2D u_shadowMap0;
uniform vec4 u_csmFarDistances;
uniform vec4 u_smSamplingParams;
uniform vec4 u_lightAttenuationSpotOuter;
uniform vec4 u_lightSpotDirectionInner;
uniform vec4 u_lightSpecularPower;
uniform vec4 u_lightDiffusePower;
uniform vec4 u_lightAmbientPower;
uniform vec4 u_lightPosition;
uniform vec4 u_materialKs;
uniform vec3 u_materialKd;
uniform vec3 u_materialKa;
uniform vec4 u_color;
uniform vec4 u_params2;
uniform vec4 u_params1;
varying vec3 v_view;
varying vec4 v_texcoord4;
varying vec4 v_texcoord3;
varying vec4 v_texcoord2;
varying vec4 v_texcoord1;
varying vec4 v_position;
varying vec3 v_normal;
void main ()
{
  float visibility_1;
  vec3 colorCoverage_2;
  vec2 tmpvar_3;
  tmpvar_3 = u_params2.zz;
  visibility_1 = 1.0;
  if ((v_position.z < u_csmFarDistances.x)) {
    vec2 tmpvar_4;
    tmpvar_4 = (v_texcoord1.xy / v_texcoord1.w);
    float tmpvar_5;
    tmpvar_5 = (clamp ((1.0 - (float(any(greaterThan (tmpvar_4, vec2(1.0, 1.0)))) + float(any(lessThan (tmpvar_4, vec2(0.0, 0.0)))))), 0.0, 1.0) * 0.4);
    vec3 tmpvar_6;
    tmpvar_6.x = -(tmpvar_5);
    tmpvar_6.y = tmpvar_5;
    tmpvar_6.z = -(tmpvar_5);
    colorCoverage_2 = tmpvar_6;
    vec4 tmpvar_7;
    tmpvar_7.w = 1.0;
    tmpvar_7.xy = (v_texcoord1.xy / v_texcoord1.w);
    tmpvar_7.z = v_texcoord1.z;
    vec4 tmpvar_8;
    tmpvar_8.xy = u_smSamplingParams.xy;
    tmpvar_8.zw = (u_smSamplingParams.zw / v_texcoord1.w);
    vec4 _shadowCoord_9;
    _shadowCoord_9 = tmpvar_7;
    float _bias_10;
    _bias_10 = u_params1.x;
    vec4 _pcfParams_11;
    _pcfParams_11 = tmpvar_8;
    vec2 _texelSize_12;
    _texelSize_12 = tmpvar_3;
    int x_13;
    int ynum_14;
    int xnum_15;
    float result_16;
    vec2 tmpvar_17;
    tmpvar_17 = ((u_smSamplingParams.xy * 2.0) + 1.0);
    float tmpvar_18;
    tmpvar_18 = (tmpvar_17.x * tmpvar_17.y);
    result_16 = 0.0;
    int tmpvar_19;
    tmpvar_19 = int(u_smSamplingParams.x);
    xnum_15 = tmpvar_19;
    ynum_14 = int(u_smSamplingParams.y);
    x_13 = -(tmpvar_19);
    while (true) {
      int y_20;
      if ((x_13 > xnum_15)) {
        break;
      };
      y_20 = -(ynum_14);
      while (true) {
        if ((y_20 > ynum_14)) {
          break;
        };
        vec2 tmpvar_21;
        tmpvar_21.x = float(x_13);
        tmpvar_21.y = float(y_20);
        vec4 tmpvar_22;
        tmpvar_22.zw = vec2(0.0, 0.0);
        tmpvar_22.xy = ((tmpvar_21 * _pcfParams_11.zw) * _texelSize_12);
        vec4 tmpvar_23;
        tmpvar_23 = (_shadowCoord_9 + tmpvar_22);
        result_16 = (result_16 + float((dot (texture2D (u_shadowMap0, (tmpvar_23.xy / tmpvar_23.w)), vec4(5.96046e-08, 1.52588e-05, 0.00390625, 1.0)) >= ((tmpvar_23.z - _bias_10) / tmpvar_23.w))));
        y_20 = (y_20 + 1);
      };
      x_13 = (x_13 + 1);
    };
    visibility_1 = (result_16 / max (tmpvar_18, 1.0));
  } else {
    if ((v_position.z < u_csmFarDistances.y)) {
      vec2 tmpvar_24;
      tmpvar_24 = (v_texcoord2.xy / v_texcoord2.w);
      float tmpvar_25;
      tmpvar_25 = (clamp ((1.0 - (float(any(greaterThan (tmpvar_24, vec2(1.0, 1.0)))) + float(any(lessThan (tmpvar_24, vec2(0.0, 0.0)))))), 0.0, 1.0) * 0.4);
      vec3 tmpvar_26;
      tmpvar_26.x = tmpvar_25;
      tmpvar_26.y = tmpvar_25;
      tmpvar_26.z = -(tmpvar_25);
      colorCoverage_2 = tmpvar_26;
      vec4 tmpvar_27;
      tmpvar_27.w = 1.0;
      tmpvar_27.xy = (v_texcoord2.xy / v_texcoord2.w);
      tmpvar_27.z = v_texcoord2.z;
      vec4 tmpvar_28;
      tmpvar_28.xy = u_smSamplingParams.xy;
      tmpvar_28.zw = (u_smSamplingParams.zw / v_texcoord2.w);
      vec4 _shadowCoord_29;
      _shadowCoord_29 = tmpvar_27;
      float _bias_30;
      _bias_30 = u_params1.x;
      vec4 _pcfParams_31;
      _pcfParams_31 = tmpvar_28;
      vec2 _texelSize_32;
      _texelSize_32 = (u_params2.zz / 2.0);
      int x_33;
      int ynum_34;
      int xnum_35;
      float result_36;
      vec2 tmpvar_37;
      tmpvar_37 = ((u_smSamplingParams.xy * 2.0) + 1.0);
      float tmpvar_38;
      tmpvar_38 = (tmpvar_37.x * tmpvar_37.y);
      result_36 = 0.0;
      int tmpvar_39;
      tmpvar_39 = int(u_smSamplingParams.x);
      xnum_35 = tmpvar_39;
      ynum_34 = int(u_smSamplingParams.y);
      x_33 = -(tmpvar_39);
      while (true) {
        int y_40;
        if ((x_33 > xnum_35)) {
          break;
        };
        y_40 = -(ynum_34);
        while (true) {
          if ((y_40 > ynum_34)) {
            break;
          };
          vec2 tmpvar_41;
          tmpvar_41.x = float(x_33);
          tmpvar_41.y = float(y_40);
          vec4 tmpvar_42;
          tmpvar_42.zw = vec2(0.0, 0.0);
          tmpvar_42.xy = ((tmpvar_41 * _pcfParams_31.zw) * _texelSize_32);
          vec4 tmpvar_43;
          tmpvar_43 = (_shadowCoord_29 + tmpvar_42);
          result_36 = (result_36 + float((dot (texture2D (u_shadowMap1, (tmpvar_43.xy / tmpvar_43.w)), vec4(5.96046e-08, 1.52588e-05, 0.00390625, 1.0)) >= ((tmpvar_43.z - _bias_30) / tmpvar_43.w))));
          y_40 = (y_40 + 1);
        };
        x_33 = (x_33 + 1);
      };
      visibility_1 = (result_36 / max (tmpvar_38, 1.0));
    } else {
      if ((v_position.z < u_csmFarDistances.z)) {
        vec2 tmpvar_44;
        tmpvar_44 = (v_texcoord3.xy / v_texcoord3.w);
        float tmpvar_45;
        tmpvar_45 = (clamp ((1.0 - (float(any(greaterThan (tmpvar_44, vec2(1.0, 1.0)))) + float(any(lessThan (tmpvar_44, vec2(0.0, 0.0)))))), 0.0, 1.0) * 0.4);
        vec3 tmpvar_46;
        tmpvar_46.x = -(tmpvar_45);
        tmpvar_46.y = -(tmpvar_45);
        tmpvar_46.z = tmpvar_45;
        colorCoverage_2 = tmpvar_46;
        vec4 tmpvar_47;
        tmpvar_47.w = 1.0;
        tmpvar_47.xy = (v_texcoord3.xy / v_texcoord3.w);
        tmpvar_47.z = v_texcoord3.z;
        vec4 tmpvar_48;
        tmpvar_48.xy = u_smSamplingParams.xy;
        tmpvar_48.zw = (u_smSamplingParams.zw / v_texcoord3.w);
        vec4 _shadowCoord_49;
        _shadowCoord_49 = tmpvar_47;
        float _bias_50;
        _bias_50 = u_params1.x;
        vec4 _pcfParams_51;
        _pcfParams_51 = tmpvar_48;
        vec2 _texelSize_52;
        _texelSize_52 = (u_params2.zz / 3.0);
        int x_53;
        int ynum_54;
        int xnum_55;
        float result_56;
        vec2 tmpvar_57;
        tmpvar_57 = ((u_smSamplingParams.xy * 2.0) + 1.0);
        float tmpvar_58;
        tmpvar_58 = (tmpvar_57.x * tmpvar_57.y);
        result_56 = 0.0;
        int tmpvar_59;
        tmpvar_59 = int(u_smSamplingParams.x);
        xnum_55 = tmpvar_59;
        ynum_54 = int(u_smSamplingParams.y);
        x_53 = -(tmpvar_59);
        while (true) {
          int y_60;
          if ((x_53 > xnum_55)) {
            break;
          };
          y_60 = -(ynum_54);
          while (true) {
            if ((y_60 > ynum_54)) {
              break;
            };
            vec2 tmpvar_61;
            tmpvar_61.x = float(x_53);
            tmpvar_61.y = float(y_60);
            vec4 tmpvar_62;
            tmpvar_62.zw = vec2(0.0, 0.0);
            tmpvar_62.xy = ((tmpvar_61 * _pcfParams_51.zw) * _texelSize_52);
            vec4 tmpvar_63;
            tmpvar_63 = (_shadowCoord_49 + tmpvar_62);
            result_56 = (result_56 + float((dot (texture2D (u_shadowMap2, (tmpvar_63.xy / tmpvar_63.w)), vec4(5.96046e-08, 1.52588e-05, 0.00390625, 1.0)) >= ((tmpvar_63.z - _bias_50) / tmpvar_63.w))));
            y_60 = (y_60 + 1);
          };
          x_53 = (x_53 + 1);
        };
        visibility_1 = (result_56 / max (tmpvar_58, 1.0));
      } else {
        vec2 tmpvar_64;
        tmpvar_64 = (v_texcoord4.xy / v_texcoord4.w);
        float tmpvar_65;
        tmpvar_65 = (clamp ((1.0 - (float(any(greaterThan (tmpvar_64, vec2(1.0, 1.0)))) + float(any(lessThan (tmpvar_64, vec2(0.0, 0.0)))))), 0.0, 1.0) * 0.4);
        vec3 tmpvar_66;
        tmpvar_66.x = tmpvar_65;
        tmpvar_66.y = -(tmpvar_65);
        tmpvar_66.z = -(tmpvar_65);
        colorCoverage_2 = tmpvar_66;
        vec4 tmpvar_67;
        tmpvar_67.w = 1.0;
        tmpvar_67.xy = (v_texcoord4.xy / v_texcoord4.w);
        tmpvar_67.z = v_texcoord4.z;
        vec4 tmpvar_68;
        tmpvar_68.xy = u_smSamplingParams.xy;
        tmpvar_68.zw = (u_smSamplingParams.zw / v_texcoord4.w);
        vec4 _shadowCoord_69;
        _shadowCoord_69 = tmpvar_67;
        float _bias_70;
        _bias_70 = u_params1.x;
        vec4 _pcfParams_71;
        _pcfParams_71 = tmpvar_68;
        vec2 _texelSize_72;
        _texelSize_72 = (u_params2.zz / 4.0);
        int x_73;
        int ynum_74;
        int xnum_75;
        float result_76;
        vec2 tmpvar_77;
        tmpvar_77 = ((u_smSamplingParams.xy * 2.0) + 1.0);
        float tmpvar_78;
        tmpvar_78 = (tmpvar_77.x * tmpvar_77.y);
        result_76 = 0.0;
        int tmpvar_79;
        tmpvar_79 = int(u_smSamplingParams.x);
        xnum_75 = tmpvar_79;
        ynum_74 = int(u_smSamplingParams.y);
        x_73 = -(tmpvar_79);
        while (true) {
          int y_80;
          if ((x_73 > xnum_75)) {
            break;
          };
          y_80 = -(ynum_74);
          while (true) {
            if ((y_80 > ynum_74)) {
              break;
            };
            vec2 tmpvar_81;
            tmpvar_81.x = float(x_73);
            tmpvar_81.y = float(y_80);
            vec4 tmpvar_82;
            tmpvar_82.zw = vec2(0.0, 0.0);
            tmpvar_82.xy = ((tmpvar_81 * _pcfParams_71.zw) * _texelSize_72);
            vec4 tmpvar_83;
            tmpvar_83 = (_shadowCoord_69 + tmpvar_82);
            result_76 = (result_76 + float((dot (texture2D (u_shadowMap3, (tmpvar_83.xy / tmpvar_83.w)), vec4(5.96046e-08, 1.52588e-05, 0.00390625, 1.0)) >= ((tmpvar_83.z - _bias_70) / tmpvar_83.w))));
            y_80 = (y_80 + 1);
          };
          x_73 = (x_73 + 1);
        };
        visibility_1 = (result_76 / max (tmpvar_78, 1.0));
      };
    };
  };
  vec3 tmpvar_84;
  tmpvar_84 = -(normalize(v_view));
  vec3 tmpvar_85;
  float tmpvar_86;
  tmpvar_85 = -(normalize(u_lightPosition.xyz));
  tmpvar_86 = 1.0;
  if ((0.0 != u_lightPosition.w)) {
    vec3 tmpvar_87;
    tmpvar_87 = (u_lightPosition.xyz - v_view);
    vec3 tmpvar_88;
    tmpvar_88 = normalize(tmpvar_87);
    tmpvar_85 = tmpvar_88;
    float tmpvar_89;
    tmpvar_89 = cos((u_lightAttenuationSpotOuter.w * 0.0174533));
    float tmpvar_90;
    tmpvar_90 = sqrt(dot (tmpvar_87, tmpvar_87));
    tmpvar_86 = ((1.0/(((u_lightAttenuationSpotOuter.x + (u_lightAttenuationSpotOuter.y * tmpvar_90)) + ((u_lightAttenuationSpotOuter.z * tmpvar_90) * tmpvar_90)))) * mix (clamp (((max (0.0, dot (-(tmpvar_88), normalize(u_lightSpotDirectionInner.xyz))) - tmpvar_89) / (cos((min (u_lightSpotDirectionInner.w, (u_lightAttenuationSpotOuter.w - 0.001)) * 0.0174533)) - tmpvar_89)), 0.0, 1.0), 1.0, float((u_lightAttenuationSpotOuter.w >= 90.0))));
  };
  float tmpvar_91;
  tmpvar_91 = dot (v_normal, tmpvar_85);
  vec2 tmpvar_92;
  tmpvar_92.x = tmpvar_91;
  tmpvar_92.y = (((float((tmpvar_91 >= 0.0)) * pow (max (0.0, dot ((((2.0 * tmpvar_91) * v_normal) - tmpvar_85), tmpvar_84)), u_materialKs.w)) * (2.0 + u_materialKs.w)) / 8.0);
  vec2 tmpvar_93;
  tmpvar_93 = (max (tmpvar_92, 0.0) * tmpvar_86);
  float tmpvar_94;
  tmpvar_94 = sqrt(dot (v_view, v_view));
  gl_FragColor.xyz = mix (vec3(0.0, 0.0, 0.0), (pow (((((u_lightAmbientPower.xyz * u_lightAmbientPower.w) * u_materialKa) * u_color.xyz) + ((((((u_lightDiffusePower.xyz * u_lightDiffusePower.w) * u_materialKd) * tmpvar_93.x) + (((u_lightSpecularPower.xyz * u_lightSpecularPower.w) * u_materialKs.xyz) * tmpvar_93.y)) * u_color.xyz) * visibility_1)), vec3(0.454545, 0.454545, 0.454545)) + (colorCoverage_2 * u_params2.y)), clamp ((1.0/(exp2(((4.36415e-05 * tmpvar_94) * tmpvar_94)))), 0.0, 1.0));
  gl_FragColor.w = 1.0;
}

 